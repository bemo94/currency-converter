apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: "com.squareup.sqldelight"
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'

version = "1.0"

sqldelight {
    SqlDelightDatabase {
        packageName = "com.octo.project"
        sourceFolders = ["sqldelight"]
        schemaOutputDirectory = file("build/dbs")
    }
}

android {
    compileSdkVersion 28
    testOptions.unitTests.includeAndroidResources = true
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        //This is for MultiplatformSettings
        debug {
            // MPP libraries don't currently get this resolution automatically
            matchingFallbacks = ['release']
        }

    }
}

kotlin {
    targets {
        final def iosTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iosTarget, 'ios') {
            binaries {
                framework('SharedCode') {
                    embedBitcode "bitcode"
                }
            }
            // add this to get sqldelight works on ios
            compilations.each {
                it.extraOpts("-linkerOpts", "-lsqlite3")
            }
        }

        fromPreset(presets.android, 'android')

    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.1'
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.11.0'
            implementation("io.ktor:ktor-client-core:$ktor_version")
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation 'org.kodein.di:kodein-di-erased:6.2.0'
        }

        commonTest.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-test-common'
            implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.2.1'
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.11.0'
            implementation 'io.mockk:mockk:1.9.3'
            api "io.ktor:ktor-client-mock:$ktor_version"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1'
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0'
            implementation("io.ktor:ktor-client-android:$ktor_version")
            implementation "com.squareup.sqldelight:android-driver:1.1.2"
        }

        iosMain.dependencies {
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.2.1'
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.11.0'
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "io.ktor:ktor-client-core-native:$ktor_version"
            implementation "com.squareup.sqldelight:ios-driver:1.1.2"
        }

    }

    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "Some description for a Kotlin/Native module"
        homepage = "Link to a Kotlin/Native module homepage"
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode

